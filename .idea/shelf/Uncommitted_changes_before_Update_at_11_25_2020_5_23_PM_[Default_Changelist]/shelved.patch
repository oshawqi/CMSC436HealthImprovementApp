Index: app/src/main/java/com/example/healthimprovementapp/WorkoutActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.healthimprovementapp\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.text.TextUtils\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.widget.*\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport com.example.healthimprovementapp.com.example.healthimprovementapp.Exercise\r\nimport com.example.healthimprovementapp.com.example.healthimprovementapp.ExerciseList\r\nimport com.example.healthimprovementapp.com.example.healthimprovementapp.Workout\r\nimport com.example.healthimprovementapp.com.example.healthimprovementapp.WorkoutExercisesActivity\r\nimport com.google.firebase.database.*\r\nimport java.lang.Exception\r\nimport java.util.*\r\nimport kotlin.collections.ArrayList\r\n\r\nclass WorkoutActivity : AppCompatActivity() {\r\n    private lateinit var editTextName: EditText\r\n    private lateinit var buttonAddWorkout: Button\r\n    internal lateinit var listViewWorkouts: ListView\r\n    internal lateinit var workouts: ArrayList<Workout>\r\n    private lateinit var databaseWorkouts: DatabaseReference\r\n    private lateinit var uid: String\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_workout)\r\n\r\n        //Access the workouts node in the database\r\n        databaseWorkouts = FirebaseDatabase.getInstance().getReference(\"workouts\")\r\n\r\n        editTextName = findViewById<View>(R.id.customWorkoutName) as EditText\r\n        buttonAddWorkout = findViewById<View>(R.id.addCustomWorkoutButton) as Button\r\n        listViewWorkouts = findViewById<View>(R.id.listViewWorkouts) as ListView\r\n\r\n        //workouts = ArrayList()\r\n\r\n        uid = intent.getStringExtra(USER_ID)\r\n\r\n        //TODO: Finish implementing the custom listview for workout names\r\n        /*\r\n        listViewWorkouts.adapter = ListViewAdapter(\r\n            this,\r\n            R.layout.list_item,\r\n            workouts\r\n        )\r\n        */\r\n\r\n    }\r\n\r\n\r\n    //TODO: Finish implementing this\r\n    private fun addWorkout() {\r\n        val name = editTextName.text.toString()\r\n\r\n        if (!TextUtils.isEmpty(name)) {\r\n            val id = databaseWorkouts.push().key\r\n            val exerciseList = arrayListOf<Exercise>()\r\n\r\n            //TODO: Modify Exercise to accommodate different types of exercises such as cardio. Timers? Durations? Etc.\r\n            val testExercise = Exercise(\"Bench Press\", 3, 10, 135 )            //TODO: Delete. This line for testing ONLY\r\n            exerciseList.add(testExercise)\r\n\r\n            val workout = Workout(id!!, name, exerciseList)\r\n\r\n            databaseWorkouts.child(uid).child(id).setValue(workout)\r\n\r\n            editTextName.setText(\"\")\r\n\r\n            Toast.makeText(this, \"Workout added\", Toast.LENGTH_LONG).show()\r\n        }\r\n        else {\r\n            Toast.makeText(this, \"Please enter a workout name\", Toast.LENGTH_LONG).show()\r\n        }\r\n    }\r\n\r\n    //TODO: Implement this\r\n    private fun deleteWorkout(workout: Workout) {\r\n        Toast.makeText(this, \"Deleting a custom workout...\", Toast.LENGTH_LONG).show()\r\n    }\r\n\r\n\r\n    override  fun onStart() {\r\n        super.onStart()\r\n\r\n\r\n        buttonAddWorkout.setOnClickListener {\r\n            addWorkout()\r\n        }\r\n        listViewWorkouts.onItemClickListener = AdapterView.OnItemClickListener { adapterView, view, i, l ->\r\n\r\n            //get the selected workout\r\n            val workout = workouts[i]\r\n\r\n            //create an intent and package it up\r\n            val intent = Intent(applicationContext, WorkoutExercisesActivity::class.java)//TODO: NEED TO FINISH THE WORKOUTEXERCISEActivity ACTIVITY\r\n            intent.putExtra(WORKOUT_ID, workout.workoutId)\r\n            intent.putExtra(WORKOUT_NAME, workout.workoutName)\r\n            intent.putExtra(WORKOUT_EXERCISES, workout.workoutExercises)\r\n\r\n            startActivity(intent)\r\n        }\r\n\r\n        listViewWorkouts.onItemLongClickListener = AdapterView.OnItemLongClickListener { adapterView, view, i, l ->\r\n            val workout = workouts[i]\r\n            deleteWorkout(workout)\r\n            true\r\n        }\r\n\r\n\r\n        Log.i(TAG, \"Entered WorkoutActivity.onStart\")\r\n\r\n        /*databaseWorkouts.addValueEventListener(object: ValueEventListener {\r\n            override fun onDataChange(dataSnapshot: DataSnapshot) {\r\n                workouts.clear()\r\n\r\n                var workout: Workout? = null\r\n                for (postSnapshot in dataSnapshot.child(uid).children) {\r\n                    try {\r\n                        workout = postSnapshot.getValue(Workout::class.java)\r\n                    } catch (e: Exception) {\r\n                        Log.e(TAG, e.toString())\r\n                    } finally {\r\n                        workouts.add(workout!!)\r\n                    }\r\n                }\r\n\r\n                val workoutListAdapter = ExerciseList(this@WorkoutActivity,\r\n                    workout!!.workoutExercises                                                       //TODO: Check this for functionality\r\n                )\r\n                listViewWorkouts.adapter = workoutListAdapter\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                TODO(\"Not yet implemented\")\r\n            }\r\n        })*/\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //TODO: These need to be changed to fit this project\r\n    companion object {\r\n        const val TAG = \"HealthImprovementApp Tag\"\r\n        const val WORKOUT_NAME = \"WORKOUT_NAME\"\r\n        const val WORKOUT_ID = \"WORKOUT_ID\"\r\n        const val WORKOUT_EXERCISES = \"WORKOUT_EXERCISES\"\r\n        val USER_ID = \"USER_ID\"\r\n    }\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/healthimprovementapp/WorkoutActivity.kt	(revision 0bd05f36a5caa9dad3782473f4b3e9a6e660d109)
+++ app/src/main/java/com/example/healthimprovementapp/WorkoutActivity.kt	(date 1605920537606)
@@ -51,7 +51,7 @@
     }
 
 
-    //TODO: Finish implementing this
+    //TODO: Finish implementing this - ensure a duplicate name is not entered. This func. should call a new activity.
     private fun addWorkout() {
         val name = editTextName.text.toString()
 
Index: app/build/kotlin/compileDebugKotlin/caches-jvm/lookups/counters.tab
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>15\r\n2
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/kotlin/compileDebugKotlin/caches-jvm/lookups/counters.tab	(revision 0bd05f36a5caa9dad3782473f4b3e9a6e660d109)
+++ app/build/kotlin/compileDebugKotlin/caches-jvm/lookups/counters.tab	(date 1605919771105)
@@ -1,2 +1,2 @@
-15
-2
\ No newline at end of file
+16
+3
\ No newline at end of file
